# name: Deploy Vector Collector

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy-dev:
#     runs-on: ubuntu-latest
#     environment:
#       name: development

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       # Parse product folder name
#       - name: Parse product
#         id: product
#         run: |
#           PRODUCT=$(git diff --name-only origin/main...HEAD | grep '^products/' | awk -F'/' '{print $2}' | sort | uniq | head -n 1)
#           if [ -z "$PRODUCT" ]; then
#             PRODUCT="br"  # fallback
#           fi
#           echo "product=$PRODUCT" >> $GITHUB_OUTPUT

#       # Parse gcp_project from tfvars
#       - name: Parse gcp_project from tfvars
#         id: tfvars
#         run: |
#           TFVARS_FILE=products/${{ steps.product.outputs.product }}/terraform.dev.tfvars
#           echo "Looking for tfvars file at: $TFVARS_FILE"
#           GCP_PROJECT=$(grep -E '^ *gcp_project *=' "$TFVARS_FILE" | cut -d '"' -f2)
#           if [ -z "$GCP_PROJECT" ]; then
#             echo "❌ gcp_project not found in $TFVARS_FILE"
#             exit 1
#           fi
#           echo "gcp_project=$GCP_PROJECT" >> $GITHUB_OUTPUT

#       # Configure Docker auth
#       - name: Configure Docker for Artifact Registry
#         run: gcloud auth configure-docker europe-west3-docker.pkg.dev --quiet

#       # Generate image tag
#       - name: Generate tag
#         id: tag
#         run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

#       - name: Ensure Artifact Registry exists
#         run: |
#           if ! gcloud artifacts repositories describe ${{ env.REPOSITORY_NAME }} --location=${{ env.REGION }} >/dev/null 2>&1; then
#             echo "Repository does not exist. Creating..."
#             gcloud artifacts repositories create ${{ env.REPOSITORY_NAME }} \
#               --repository-format=docker \
#               --location=${{ env.REGION }} \
#               --description="Vector repo for ${{ env.ENV }}"
#           else
#             echo "Repository already exists."
#           fi


#       # Build and push image
#       - name: Build and push image
#         run: |
#           IMAGE_URI="europe-west3-docker.pkg.dev/${{ steps.tfvars.outputs.gcp_project }}/${{ steps.product.outputs.product }}-dev-repository/my-vector-local:${{ steps.tag.outputs.tag }}"
#           echo "IMAGE_URI=$IMAGE_URI"
#           docker build -t "$IMAGE_URI" .
#           docker push "$IMAGE_URI"

#       # Setup Terraform
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3

#       # Terraform Init
#       - name: Terraform Init
#         run: terraform init
#         working-directory: deploy/terraform

#       # Terraform Apply
#       - name: Terraform Apply (Dev)
#         run: terraform apply -auto-approve -var="image_tag=${{ steps.tag.outputs.tag }}" -var-file="../../products/${{ steps.product.outputs.product }}/terraform.dev.tfvars"
#         working-directory: deploy/terraform

#   deploy-prod:
#     needs: deploy-dev
#     runs-on: ubuntu-latest
#     environment:
#       name: production

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       # Parse product folder name
#       - name: Parse product
#         id: product
#         run: |
#           PRODUCT=$(git diff --name-only origin/main...HEAD | grep '^products/' | awk -F'/' '{print $2}' | sort | uniq | head -n 1)
#           if [ -z "$PRODUCT" ]; then
#             PRODUCT="br"  # fallback
#           fi
#           echo "product=$PRODUCT" >> $GITHUB_OUTPUT

#       # Parse gcp_project from tfvars
#       - name: Parse gcp_project from tfvars
#         id: tfvars
#         run: |
#           TFVARS_FILE=products/${{ steps.product.outputs.product }}/terraform.prod.tfvars
#           echo "Looking for tfvars file at: $TFVARS_FILE"
#           GCP_PROJECT=$(grep -E '^ *gcp_project *=' "$TFVARS_FILE" | cut -d '"' -f2)
#           if [ -z "$GCP_PROJECT" ]; then
#             echo "❌ gcp_project not found in $TFVARS_FILE"
#             exit 1
#           fi
#           echo "gcp_project=$GCP_PROJECT" >> $GITHUB_OUTPUT

#       # Setup Terraform
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3

#       # Terraform Init
#       - name: Terraform Init
#         run: terraform init
#         working-directory: deploy/terraform

#       # Terraform Apply
#       - name: Terraform Apply (Prod)
#         run: terraform apply -auto-approve -var="image_tag=${{ needs.deploy-dev.outputs.tag }}" -var-file="../../products/${{ steps.product.outputs.product }}/terraform.prod.tfvars"
#         working-directory: deploy/terraform


name: Deploy Vector Collector

on:
  push:
    branches:
      - main

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment:
      name: development

    env:
      REGION: europe-west3

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Parse product
      - name: Parse product
        id: product
        run: |
          PRODUCT=$(git diff --name-only origin/main...HEAD | grep '^products/' | awk -F'/' '{print $2}' | sort | uniq | head -n 1)
          if [ -z "$PRODUCT" ]; then
            PRODUCT="br"  # fallback
          fi
          echo "product=$PRODUCT" >> $GITHUB_OUTPUT

      # Parse gcp_project from tfvars
      - name: Parse gcp_project from tfvars
        id: tfvars
        run: |
          TFVARS_FILE=products/${{ steps.product.outputs.product }}/terraform.dev.tfvars
          echo "Looking for tfvars file at: $TFVARS_FILE"
          GCP_PROJECT=$(grep -E '^ *gcp_project *=' "$TFVARS_FILE" | cut -d '"' -f2)
          if [ -z "$GCP_PROJECT" ]; then
            echo "❌ gcp_project not found in $TFVARS_FILE"
            exit 1
          fi
          echo "gcp_project=$GCP_PROJECT" >> $GITHUB_OUTPUT

      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Configure Docker auth
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # Generate image tag
      - name: Generate tag
        id: tag
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Ensure Artifact Registry exists
      # Ensure Artifact Registry exists
      - name: Ensure Artifact Registry exists
        run: |
          REPO_NAME="vector-${{ steps.product.outputs.product }}-repository"
          REGION="${{ env.REGION }}"
          PROJECT_ID="${{ steps.tfvars.outputs.gcp_project }}"

          if ! gcloud artifacts repositories describe "$REPO_NAME" --location="$REGION" --project="$PROJECT_ID" >/dev/null 2>&1; then
            echo "Repository does not exist. Creating..."
            gcloud artifacts repositories create "$REPO_NAME" \
              --repository-format=docker \
              --location="$REGION" \
              --project="$PROJECT_ID" \
              --description="Vector repo for $REPO_NAME"
          else
            echo "Repository already exists."
          fi


      # Build and push image
      - name: Build and push image
        run: |
          IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ steps.tfvars.outputs.gcp_project }}/vector-${{ steps.product.outputs.product }}-repository/my-vector-local:${{ steps.tag.outputs.tag }}"
          echo "IMAGE_URI=$IMAGE_URI"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"


      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: deploy/terraform

      # Terraform Apply
      - name: Terraform Apply (Dev)
        run: terraform apply -auto-approve -var="image_tag=${{ steps.tag.outputs.tag }}" -var-file="../../products/${{ steps.product.outputs.product }}/terraform.dev.tfvars"
        working-directory: deploy/terraform

      # Export tag for prod
      - name: Set output tag
        id: set-tag
        run: echo "tag=${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT

  deploy-prod:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment:
      name: production

    env:
      REGION: europe-west3

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Parse product
      - name: Parse product
        id: product
        run: |
          PRODUCT=$(git diff --name-only origin/main...HEAD | grep '^products/' | awk -F'/' '{print $2}' | sort | uniq | head -n 1)
          if [ -z "$PRODUCT" ]; then
            PRODUCT="br"  # fallback
          fi
          echo "product=$PRODUCT" >> $GITHUB_OUTPUT

      # Parse gcp_project from tfvars
      - name: Parse gcp_project from tfvars
        id: tfvars
        run: |
          TFVARS_FILE=products/${{ steps.product.outputs.product }}/terraform.prod.tfvars
          echo "Looking for tfvars file at: $TFVARS_FILE"
          GCP_PROJECT=$(grep -E '^ *gcp_project *=' "$TFVARS_FILE" | cut -d '"' -f2)
          if [ -z "$GCP_PROJECT" ]; then
            echo "❌ gcp_project not found in $TFVARS_FILE"
            exit 1
          fi
          echo "gcp_project=$GCP_PROJECT" >> $GITHUB_OUTPUT

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: deploy/terraform

      # Terraform Apply
      - name: Terraform Apply (Prod)
        run: terraform apply -auto-approve -var="image_tag=${{ needs.deploy-dev.outputs.set-tag.outputs.tag }}" -var-file="../../products/${{ steps.product.outputs.product }}/terraform.prod.tfvars"
        working-directory: deploy/terraform
